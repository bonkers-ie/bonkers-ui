const d=r=>{const o=r.filter(e=>e.name.includes("--font-size")),n=r.filter(e=>e.name.includes("--spacing")),t=r.filter(e=>e.name.includes("--color")),s=t.filter(({name:e})=>e.includes("white")||e.includes("black")||e.includes("transparent")||e.includes("current")),l=t.filter(({name:e})=>e.includes("ber-"));return{fontSizes:o,spacings:n,groupedColors:p(t),baseColors:s,berColors:l}},p=r=>{const o=["transparent","current","black","white"],t=r.filter(({name:s})=>{const l=s.replace("--color-","");return l.startsWith("ber-")?!1:!o.includes(l)}).reduce((s,{name:l,value:e})=>{const f=l.replace("--color-",""),i=f.split("-"),u=i[i.length-1];let c,a;return!isNaN(parseInt(u))&&/^\d+$/.test(u)?(a=u,c=i.slice(0,-1).join("-")):(a="DEFAULT",c=f),s[c]||(s[c]={groupTitle:c,groupColors:[]}),s[c].groupColors.push({shade:a,value:e,name:l}),s},{});return Object.values(t)};function g(){const r=new Map;for(const o of document.styleSheets)try{if(!o.cssRules)continue;for(const n of o.cssRules)if(n instanceof CSSStyleRule&&n.selectorText===":root"){for(const t of n.style)if(t.startsWith("--")&&!r.has(t)){const s=n.style.getPropertyValue(t).trim();r.set(t,s)}}}catch{console.warn("Skipping stylesheet due to CORS policy:",o.href)}return Array.from(r,([o,n])=>({name:o,value:n}))}export{d as a,g};
