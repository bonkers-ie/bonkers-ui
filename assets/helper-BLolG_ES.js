const d=s=>{const o=s.filter(e=>e.name.includes("--font-size")),r=s.filter(e=>e.name.includes("--spacing")),n=s.filter(e=>e.name.includes("--color")),t=n.filter(({name:e})=>e.includes("white")||e.includes("black")||e.includes("transparent")||e.includes("current"));return{fontSizes:o,spacings:r,groupedColors:p(n),baseColors:t}},p=s=>{const o=["transparent","current","black","white"],n=s.filter(({name:t})=>{const e=t.replace("--color-","");return!o.includes(e)}).reduce((t,{name:e,value:f})=>{const a=e.replace("--color-",""),c=a.split("-"),i=c[c.length-1];let l,u;return!isNaN(parseInt(i))&&/^\d+$/.test(i)?(u=i,l=c.slice(0,-1).join("-")):(u="DEFAULT",l=a),t[l]||(t[l]={groupTitle:l,groupColors:[]}),t[l].groupColors.push({shade:u,value:f,name:e}),t},{});return Object.values(n)};function g(){const s=new Map;for(const o of document.styleSheets)try{if(!o.cssRules)continue;for(const r of o.cssRules)if(r instanceof CSSStyleRule&&r.selectorText===":root"){for(const n of r.style)if(n.startsWith("--")&&!s.has(n)){const t=r.style.getPropertyValue(n).trim();s.set(n,t)}}}catch{console.warn("Skipping stylesheet due to CORS policy:",o.href)}return Array.from(s,([o,r])=>({name:o,value:r}))}export{d as a,g};
