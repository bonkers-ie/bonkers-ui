const p=()=>{const t=globalThis.getComputedStyle(document.documentElement);return t?Object.values(t).filter(s=>s.startsWith("--")).map(s=>({name:s,value:t.getPropertyValue(s)})):[]},m=()=>{const t=p(),s=t.filter(e=>e.name.includes("--font-size")),u=t.filter(e=>e.name.includes("--spacing")),l=t.filter(e=>e.name.includes("--color")),r=l.filter(({name:e})=>e.includes("white")||e.includes("black")||e.includes("transparent")||e.includes("current"));return{fontSizes:s,spacings:u,groupedColors:g(l),baseColors:r}},g=t=>{const s=["transparent","current","black","white"],l=t.filter(({name:r})=>{const e=r.replace("--color-","");return!s.includes(e)}).reduce((r,{name:e,value:d})=>{const a=e.replace("--color-",""),n=a.split("-"),c=n[n.length-1];let o,i;return!isNaN(parseInt(c))&&/^\d+$/.test(c)?(i=c,o=n.slice(0,-1).join("-")):(i="DEFAULT",o=a),r[o]||(r[o]={groupTitle:o,groupColors:[]}),r[o].groupColors.push({shade:i,value:d,name:e}),r},{});return Object.values(l)};export{m as g};
